// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:arm_chair_quaterback/common/entities/all_team_players_by_up_star_entity.dart';
import 'package:arm_chair_quaterback/common/entities/api_error_code_entity.dart';
import 'package:arm_chair_quaterback/common/entities/battle_entity.dart';
import 'package:arm_chair_quaterback/common/entities/card_pack_info_entity.dart';
import 'package:arm_chair_quaterback/common/entities/config/prop_define_entity.dart';
import 'package:arm_chair_quaterback/common/entities/game_schedules_info.dart';
import 'package:arm_chair_quaterback/common/entities/grade_in_star_define_entity.dart';
import 'package:arm_chair_quaterback/common/entities/guess_data.dart';
import 'package:arm_chair_quaterback/common/entities/guess_game_info_entity.dart';
import 'package:arm_chair_quaterback/common/entities/guess_game_info_v2_entity.dart';
import 'package:arm_chair_quaterback/common/entities/guess_infos_entity.dart';
import 'package:arm_chair_quaterback/common/entities/guess_param_entity.dart';
import 'package:arm_chair_quaterback/common/entities/guess_reference_value.dart';
import 'package:arm_chair_quaterback/common/entities/guess_top_reviews_entity.dart';
import 'package:arm_chair_quaterback/common/entities/my_team_entity.dart';
import 'package:arm_chair_quaterback/common/entities/nab_player_season_game_rank_entity.dart';
import 'package:arm_chair_quaterback/common/entities/nba_game_detail_entity.dart';
import 'package:arm_chair_quaterback/common/entities/nba_player_base_info_entity.dart';
import 'package:arm_chair_quaterback/common/entities/nba_player_infos_entity.dart';
import 'package:arm_chair_quaterback/common/entities/nba_player_season_game_entity.dart';
import 'package:arm_chair_quaterback/common/entities/nba_player_stat_entity.dart';
import 'package:arm_chair_quaterback/common/entities/nba_team_entity.dart';
import 'package:arm_chair_quaterback/common/entities/new_test_entity.dart';
import 'package:arm_chair_quaterback/common/entities/news_define_entity.dart';
import 'package:arm_chair_quaterback/common/entities/news_entity.dart';
import 'package:arm_chair_quaterback/common/entities/news_list_entity.dart';
import 'package:arm_chair_quaterback/common/entities/pick_type_entity.dart';
import 'package:arm_chair_quaterback/common/entities/player_day_data_entity.dart';
import 'package:arm_chair_quaterback/common/entities/player_status_entity.dart';
import 'package:arm_chair_quaterback/common/entities/rank_award_entity.dart';
import 'package:arm_chair_quaterback/common/entities/rank_info_entity.dart';
import 'package:arm_chair_quaterback/common/entities/rank_list_entity.dart';
import 'package:arm_chair_quaterback/common/entities/receive_prop_entity.dart';
import 'package:arm_chair_quaterback/common/entities/recive_award_entity.dart';
import 'package:arm_chair_quaterback/common/entities/recive_award_v2_entity.dart';
import 'package:arm_chair_quaterback/common/entities/review_entity.dart';
import 'package:arm_chair_quaterback/common/entities/reward_group_entity.dart';
import 'package:arm_chair_quaterback/common/entities/scores_entity.dart';
import 'package:arm_chair_quaterback/common/entities/scores_not_start_game_entity.dart';
import 'package:arm_chair_quaterback/common/entities/star_up_define_entity.dart';
import 'package:arm_chair_quaterback/common/entities/tactic_grade_entity.dart';
import 'package:arm_chair_quaterback/common/entities/tactics_define_entity.dart';
import 'package:arm_chair_quaterback/common/entities/team_info_entity.dart';
import 'package:arm_chair_quaterback/common/entities/team_player_info_entity.dart';
import 'package:arm_chair_quaterback/common/entities/team_player_list_entity.dart';
import 'package:arm_chair_quaterback/common/entities/team_rank/team_rank_entity.dart';
import 'package:arm_chair_quaterback/common/entities/team_rule_config_entity.dart';
import 'package:arm_chair_quaterback/common/entities/team_simple_entity.dart';
import 'package:arm_chair_quaterback/common/entities/trade_entity/trade_info_entity.dart';
import 'package:arm_chair_quaterback/common/entities/train_define_entity.dart';
import 'package:arm_chair_quaterback/common/entities/train_task_entity.dart';
import 'package:arm_chair_quaterback/common/entities/training_info_entity.dart';
import 'package:arm_chair_quaterback/common/entities/training_task_entity.dart';
import 'package:arm_chair_quaterback/common/entities/up_start_team_player_response_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AllTeamPlayersByUpStarEntity>[] is M) {
      return data.map<AllTeamPlayersByUpStarEntity>((Map<String, dynamic> e) =>
          AllTeamPlayersByUpStarEntity.fromJson(e)).toList() as M;
    }
    if (<AllTeamPlayersByUpStarPotential>[] is M) {
      return data.map<AllTeamPlayersByUpStarPotential>((
          Map<String, dynamic> e) =>
          AllTeamPlayersByUpStarPotential.fromJson(e)).toList() as M;
    }
    if (<AllTeamPlayersByUpStarUpStarBase>[] is M) {
      return data.map<AllTeamPlayersByUpStarUpStarBase>((
          Map<String, dynamic> e) =>
          AllTeamPlayersByUpStarUpStarBase.fromJson(e)).toList() as M;
    }
    if (<ApiErrorCodeEntity>[] is M) {
      return data.map<ApiErrorCodeEntity>((Map<String, dynamic> e) =>
          ApiErrorCodeEntity.fromJson(e)).toList() as M;
    }
    if (<BattleEntity>[] is M) {
      return data.map<BattleEntity>((Map<String, dynamic> e) =>
          BattleEntity.fromJson(e)).toList() as M;
    }
    if (<BattleNew>[] is M) {
      return data.map<BattleNew>((Map<String, dynamic> e) =>
          BattleNew.fromJson(e)).toList() as M;
    }
    if (<TeamBuffer>[] is M) {
      return data.map<TeamBuffer>((Map<String, dynamic> e) =>
          TeamBuffer.fromJson(e)).toList() as M;
    }
    if (<TeamPlayerList>[] is M) {
      return data.map<TeamPlayerList>((Map<String, dynamic> e) =>
          TeamPlayerList.fromJson(e)).toList() as M;
    }
    if (<Potential>[] is M) {
      return data.map<Potential>((Map<String, dynamic> e) =>
          Potential.fromJson(e)).toList() as M;
    }
    if (<UpStarBase>[] is M) {
      return data.map<UpStarBase>((Map<String, dynamic> e) =>
          UpStarBase.fromJson(e)).toList() as M;
    }
    if (<BattleTeam>[] is M) {
      return data.map<BattleTeam>((Map<String, dynamic> e) =>
          BattleTeam.fromJson(e)).toList() as M;
    }
    if (<Preference>[] is M) {
      return data.map<Preference>((Map<String, dynamic> e) =>
          Preference.fromJson(e)).toList() as M;
    }
    if (<AbilityValue>[] is M) {
      return data.map<AbilityValue>((Map<String, dynamic> e) =>
          AbilityValue.fromJson(e)).toList() as M;
    }
    if (<BattleGameData>[] is M) {
      return data.map<BattleGameData>((Map<String, dynamic> e) =>
          BattleGameData.fromJson(e)).toList() as M;
    }
    if (<ScoreBoardDetails>[] is M) {
      return data.map<ScoreBoardDetails>((Map<String, dynamic> e) =>
          ScoreBoardDetails.fromJson(e)).toList() as M;
    }
    if (<ScoreBoard>[] is M) {
      return data.map<ScoreBoard>((Map<String, dynamic> e) =>
          ScoreBoard.fromJson(e)).toList() as M;
    }
    if (<GameSchedule>[] is M) {
      return data.map<GameSchedule>((Map<String, dynamic> e) =>
          GameSchedule.fromJson(e)).toList() as M;
    }
    if (<TestDataMap>[] is M) {
      return data.map<TestDataMap>((Map<String, dynamic> e) =>
          TestDataMap.fromJson(e)).toList() as M;
    }
    if (<CardPackInfoEntity>[] is M) {
      return data.map<CardPackInfoEntity>((Map<String, dynamic> e) =>
          CardPackInfoEntity.fromJson(e)).toList() as M;
    }
    if (<CardPackInfoCard>[] is M) {
      return data.map<CardPackInfoCard>((Map<String, dynamic> e) =>
          CardPackInfoCard.fromJson(e)).toList() as M;
    }
    if (<PropDefineEntity>[] is M) {
      return data.map<PropDefineEntity>((Map<String, dynamic> e) =>
          PropDefineEntity.fromJson(e)).toList() as M;
    }
    if (<GameSchedulesInfo>[] is M) {
      return data.map<GameSchedulesInfo>((Map<String, dynamic> e) =>
          GameSchedulesInfo.fromJson(e)).toList() as M;
    }
    if (<GradeInStarDefineEntity>[] is M) {
      return data.map<GradeInStarDefineEntity>((Map<String, dynamic> e) =>
          GradeInStarDefineEntity.fromJson(e)).toList() as M;
    }
    if (<GuessData>[] is M) {
      return data.map<GuessData>((Map<String, dynamic> e) =>
          GuessData.fromJson(e)).toList() as M;
    }
    if (<Awards>[] is M) {
      return data.map<Awards>((Map<String, dynamic> e) => Awards.fromJson(e))
          .toList() as M;
    }
    if (<GuessGameInfoEntity>[] is M) {
      return data.map<GuessGameInfoEntity>((Map<String, dynamic> e) =>
          GuessGameInfoEntity.fromJson(e)).toList() as M;
    }
    if (<GuessGameInfoV2Entity>[] is M) {
      return data.map<GuessGameInfoV2Entity>((Map<String, dynamic> e) =>
          GuessGameInfoV2Entity.fromJson(e)).toList() as M;
    }
    if (<GuessInfosEntity>[] is M) {
      return data.map<GuessInfosEntity>((Map<String, dynamic> e) =>
          GuessInfosEntity.fromJson(e)).toList() as M;
    }
    if (<GuessInfosL5Avg>[] is M) {
      return data.map<GuessInfosL5Avg>((Map<String, dynamic> e) =>
          GuessInfosL5Avg.fromJson(e)).toList() as M;
    }
    if (<GuessInfosGuessData>[] is M) {
      return data.map<GuessInfosGuessData>((Map<String, dynamic> e) =>
          GuessInfosGuessData.fromJson(e)).toList() as M;
    }
    if (<GuessInfosGuessReferenceValue>[] is M) {
      return data.map<GuessInfosGuessReferenceValue>((Map<String, dynamic> e) =>
          GuessInfosGuessReferenceValue.fromJson(e)).toList() as M;
    }
    if (<GuessPlayerParamEntity>[] is M) {
      return data.map<GuessPlayerParamEntity>((Map<String, dynamic> e) =>
          GuessPlayerParamEntity.fromJson(e)).toList() as M;
    }
    if (<GuessGameParamEntity>[] is M) {
      return data.map<GuessGameParamEntity>((Map<String, dynamic> e) =>
          GuessGameParamEntity.fromJson(e)).toList() as M;
    }
    if (<GuessReferenceValue>[] is M) {
      return data.map<GuessReferenceValue>((Map<String, dynamic> e) =>
          GuessReferenceValue.fromJson(e)).toList() as M;
    }
    if (<GuessTopReviewsEntity>[] is M) {
      return data.map<GuessTopReviewsEntity>((Map<String, dynamic> e) =>
          GuessTopReviewsEntity.fromJson(e)).toList() as M;
    }
    if (<MyTeamEntity>[] is M) {
      return data.map<MyTeamEntity>((Map<String, dynamic> e) =>
          MyTeamEntity.fromJson(e)).toList() as M;
    }
    if (<NabPlayerSeasonGameRankEntity>[] is M) {
      return data.map<NabPlayerSeasonGameRankEntity>((Map<String, dynamic> e) =>
          NabPlayerSeasonGameRankEntity.fromJson(e)).toList() as M;
    }
    if (<NbaGameDetailEntity>[] is M) {
      return data.map<NbaGameDetailEntity>((Map<String, dynamic> e) =>
          NbaGameDetailEntity.fromJson(e)).toList() as M;
    }
    if (<NbaGameDetailScoreBoardDetails>[] is M) {
      return data.map<NbaGameDetailScoreBoardDetails>((
          Map<String, dynamic> e) => NbaGameDetailScoreBoardDetails.fromJson(e))
          .toList() as M;
    }
    if (<NbaGameDetailGameData>[] is M) {
      return data.map<NbaGameDetailGameData>((Map<String, dynamic> e) =>
          NbaGameDetailGameData.fromJson(e)).toList() as M;
    }
    if (<NbaGameDetailGameDataTeamScore>[] is M) {
      return data.map<NbaGameDetailGameDataTeamScore>((
          Map<String, dynamic> e) => NbaGameDetailGameDataTeamScore.fromJson(e))
          .toList() as M;
    }
    if (<NbaGameDetailGameDataPlayerScores>[] is M) {
      return data.map<NbaGameDetailGameDataPlayerScores>((
          Map<String, dynamic> e) =>
          NbaGameDetailGameDataPlayerScores.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoEntity>[] is M) {
      return data.map<NbaPlayerBaseInfoEntity>((Map<String, dynamic> e) =>
          NbaPlayerBaseInfoEntity.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoPlayerDataAvg>[] is M) {
      return data.map<NbaPlayerBaseInfoPlayerDataAvg>((
          Map<String, dynamic> e) => NbaPlayerBaseInfoPlayerDataAvg.fromJson(e))
          .toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfos>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfos>((Map<String, dynamic> e) =>
          NbaPlayerBaseInfoGuessInfos.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfosAstCommunityPick>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfosAstCommunityPick>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoGuessInfosAstCommunityPick.fromJson(e))
          .toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfosAstPicks>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfosAstPicks>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoGuessInfosAstPicks.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfosAstPicksGuessReferenceValue>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfosAstPicksGuessReferenceValue>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoGuessInfosAstPicksGuessReferenceValue.fromJson(e))
          .toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfosAstTwoTeamGames>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfosAstTwoTeamGames>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoGuessInfosAstTwoTeamGames.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfosReb>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfosReb>((
          Map<String, dynamic> e) => NbaPlayerBaseInfoGuessInfosReb.fromJson(e))
          .toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfosRebCommunityPick>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfosRebCommunityPick>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoGuessInfosRebCommunityPick.fromJson(e))
          .toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfosRebPicks>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfosRebPicks>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoGuessInfosRebPicks.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfosRebPicksGuessReferenceValue>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfosRebPicksGuessReferenceValue>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoGuessInfosRebPicksGuessReferenceValue.fromJson(e))
          .toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfosRebTwoTeamGames>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfosRebTwoTeamGames>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoGuessInfosRebTwoTeamGames.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfosProperty>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfosProperty>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoGuessInfosProperty.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfosPtsCommunityPick>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfosPtsCommunityPick>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoGuessInfosPtsCommunityPick.fromJson(e))
          .toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfosPtsPicks>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfosPtsPicks>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoGuessInfosPtsPicks.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfosPtsPicksGuessReferenceValue>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfosPtsPicksGuessReferenceValue>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoGuessInfosPtsPicksGuessReferenceValue.fromJson(e))
          .toList() as M;
    }
    if (<NbaPlayerBaseInfoGuessInfosPtsTwoTeamGames>[] is M) {
      return data.map<NbaPlayerBaseInfoGuessInfosPtsTwoTeamGames>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoGuessInfosPtsTwoTeamGames.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoPlayerBaseInfo>[] is M) {
      return data.map<NbaPlayerBaseInfoPlayerBaseInfo>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoPlayerBaseInfo.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoL5GameData>[] is M) {
      return data.map<NbaPlayerBaseInfoL5GameData>((Map<String, dynamic> e) =>
          NbaPlayerBaseInfoL5GameData.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoL5DataAvg>[] is M) {
      return data.map<NbaPlayerBaseInfoL5DataAvg>((Map<String, dynamic> e) =>
          NbaPlayerBaseInfoL5DataAvg.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoPlayerRegularMap>[] is M) {
      return data.map<NbaPlayerBaseInfoPlayerRegularMap>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoPlayerRegularMap.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoPlayerPlayoffsMap>[] is M) {
      return data.map<NbaPlayerBaseInfoPlayerPlayoffsMap>((
          Map<String, dynamic> e) =>
          NbaPlayerBaseInfoPlayerPlayoffsMap.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoPlayerTrends>[] is M) {
      return data.map<NbaPlayerBaseInfoPlayerTrends>((Map<String, dynamic> e) =>
          NbaPlayerBaseInfoPlayerTrends.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerBaseInfoPlayerNews>[] is M) {
      return data.map<NbaPlayerBaseInfoPlayerNews>((Map<String, dynamic> e) =>
          NbaPlayerBaseInfoPlayerNews.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerInfosEntity>[] is M) {
      return data.map<NbaPlayerInfosEntity>((Map<String, dynamic> e) =>
          NbaPlayerInfosEntity.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerInfosPlayerDataAvgList>[] is M) {
      return data.map<NbaPlayerInfosPlayerDataAvgList>((
          Map<String, dynamic> e) =>
          NbaPlayerInfosPlayerDataAvgList.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerInfosPlayerDataCapList>[] is M) {
      return data.map<NbaPlayerInfosPlayerDataCapList>((
          Map<String, dynamic> e) =>
          NbaPlayerInfosPlayerDataCapList.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerInfosPlayerBaseInfoList>[] is M) {
      return data.map<NbaPlayerInfosPlayerBaseInfoList>((
          Map<String, dynamic> e) =>
          NbaPlayerInfosPlayerBaseInfoList.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerSeasonEntity>[] is M) {
      return data.map<NbaPlayerSeasonEntity>((Map<String, dynamic> e) =>
          NbaPlayerSeasonEntity.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerSeasonGameEntity>[] is M) {
      return data.map<NbaPlayerSeasonGameEntity>((Map<String, dynamic> e) =>
          NbaPlayerSeasonGameEntity.fromJson(e)).toList() as M;
    }
    if (<NbaPlayerStatEntity>[] is M) {
      return data.map<NbaPlayerStatEntity>((Map<String, dynamic> e) =>
          NbaPlayerStatEntity.fromJson(e)).toList() as M;
    }
    if (<NbaTeamEntity>[] is M) {
      return data.map<NbaTeamEntity>((Map<String, dynamic> e) =>
          NbaTeamEntity.fromJson(e)).toList() as M;
    }
    if (<NewTestEntity>[] is M) {
      return data.map<NewTestEntity>((Map<String, dynamic> e) =>
          NewTestEntity.fromJson(e)).toList() as M;
    }
    if (<NewTestAst>[] is M) {
      return data.map<NewTestAst>((Map<String, dynamic> e) =>
          NewTestAst.fromJson(e)).toList() as M;
    }
    if (<NewTestAstGuessReferenceValue>[] is M) {
      return data.map<NewTestAstGuessReferenceValue>((Map<String, dynamic> e) =>
          NewTestAstGuessReferenceValue.fromJson(e)).toList() as M;
    }
    if (<NewTest3pt>[] is M) {
      return data.map<NewTest3pt>((Map<String, dynamic> e) =>
          NewTest3pt.fromJson(e)).toList() as M;
    }
    if (<NewTest3ptGuessReferenceValue>[] is M) {
      return data.map<NewTest3ptGuessReferenceValue>((Map<String, dynamic> e) =>
          NewTest3ptGuessReferenceValue.fromJson(e)).toList() as M;
    }
    if (<NewTestPts>[] is M) {
      return data.map<NewTestPts>((Map<String, dynamic> e) =>
          NewTestPts.fromJson(e)).toList() as M;
    }
    if (<NewTestPtsGuessReferenceValue>[] is M) {
      return data.map<NewTestPtsGuessReferenceValue>((Map<String, dynamic> e) =>
          NewTestPtsGuessReferenceValue.fromJson(e)).toList() as M;
    }
    if (<PicksDefineEntity>[] is M) {
      return data.map<PicksDefineEntity>((Map<String, dynamic> e) =>
          PicksDefineEntity.fromJson(e)).toList() as M;
    }
    if (<NewsEntity>[] is M) {
      return data.map<NewsEntity>((Map<String, dynamic> e) =>
          NewsEntity.fromJson(e)).toList() as M;
    }
    if (<NewsListEntity>[] is M) {
      return data.map<NewsListEntity>((Map<String, dynamic> e) =>
          NewsListEntity.fromJson(e)).toList() as M;
    }
    if (<NewsListDetail>[] is M) {
      return data.map<NewsListDetail>((Map<String, dynamic> e) =>
          NewsListDetail.fromJson(e)).toList() as M;
    }
    if (<PickTypeEntity>[] is M) {
      return data.map<PickTypeEntity>((Map<String, dynamic> e) =>
          PickTypeEntity.fromJson(e)).toList() as M;
    }
    if (<PlayerDayDataEntity>[] is M) {
      return data.map<PlayerDayDataEntity>((Map<String, dynamic> e) =>
          PlayerDayDataEntity.fromJson(e)).toList() as M;
    }
    if (<PlayerStatusEntity>[] is M) {
      return data.map<PlayerStatusEntity>((Map<String, dynamic> e) =>
          PlayerStatusEntity.fromJson(e)).toList() as M;
    }
    if (<RankAwardEntity>[] is M) {
      return data.map<RankAwardEntity>((Map<String, dynamic> e) =>
          RankAwardEntity.fromJson(e)).toList() as M;
    }
    if (<RankInfoEntity>[] is M) {
      return data.map<RankInfoEntity>((Map<String, dynamic> e) =>
          RankInfoEntity.fromJson(e)).toList() as M;
    }
    if (<RankListEntity>[] is M) {
      return data.map<RankListEntity>((Map<String, dynamic> e) =>
          RankListEntity.fromJson(e)).toList() as M;
    }
    if (<RankListMyRank>[] is M) {
      return data.map<RankListMyRank>((Map<String, dynamic> e) =>
          RankListMyRank.fromJson(e)).toList() as M;
    }
    if (<ReceivePropEntity>[] is M) {
      return data.map<ReceivePropEntity>((Map<String, dynamic> e) =>
          ReceivePropEntity.fromJson(e)).toList() as M;
    }
    if (<ReciveAwardEntity>[] is M) {
      return data.map<ReciveAwardEntity>((Map<String, dynamic> e) =>
          ReciveAwardEntity.fromJson(e)).toList() as M;
    }
    if (<ReciveAwardL5Avg>[] is M) {
      return data.map<ReciveAwardL5Avg>((Map<String, dynamic> e) =>
          ReciveAwardL5Avg.fromJson(e)).toList() as M;
    }
    if (<ReciveAwardV2Entity>[] is M) {
      return data.map<ReciveAwardV2Entity>((Map<String, dynamic> e) =>
          ReciveAwardV2Entity.fromJson(e)).toList() as M;
    }
    if (<ReciveAwardV2GuessInfo>[] is M) {
      return data.map<ReciveAwardV2GuessInfo>((Map<String, dynamic> e) =>
          ReciveAwardV2GuessInfo.fromJson(e)).toList() as M;
    }
    if (<ReciveAwardV2GuessInfoGuessData>[] is M) {
      return data.map<ReciveAwardV2GuessInfoGuessData>((
          Map<String, dynamic> e) =>
          ReciveAwardV2GuessInfoGuessData.fromJson(e)).toList() as M;
    }
    if (<ReviewEntity>[] is M) {
      return data.map<ReviewEntity>((Map<String, dynamic> e) =>
          ReviewEntity.fromJson(e)).toList() as M;
    }
    if (<RewardGroupEntity>[] is M) {
      return data.map<RewardGroupEntity>((Map<String, dynamic> e) =>
          RewardGroupEntity.fromJson(e)).toList() as M;
    }
    if (<ScoresEntity>[] is M) {
      return data.map<ScoresEntity>((Map<String, dynamic> e) =>
          ScoresEntity.fromJson(e)).toList() as M;
    }
    if (<ScoresNotStartGameEntity>[] is M) {
      return data.map<ScoresNotStartGameEntity>((Map<String, dynamic> e) =>
          ScoresNotStartGameEntity.fromJson(e)).toList() as M;
    }
    if (<TeamPlayer>[] is M) {
      return data.map<TeamPlayer>((Map<String, dynamic> e) =>
          TeamPlayer.fromJson(e)).toList() as M;
    }
    if (<TeamHistory>[] is M) {
      return data.map<TeamHistory>((Map<String, dynamic> e) =>
          TeamHistory.fromJson(e)).toList() as M;
    }
    if (<StarUpDefineEntity>[] is M) {
      return data.map<StarUpDefineEntity>((Map<String, dynamic> e) =>
          StarUpDefineEntity.fromJson(e)).toList() as M;
    }
    if (<TacticGradeEntity>[] is M) {
      return data.map<TacticGradeEntity>((Map<String, dynamic> e) =>
          TacticGradeEntity.fromJson(e)).toList() as M;
    }
    if (<TacticGradeCards>[] is M) {
      return data.map<TacticGradeCards>((Map<String, dynamic> e) =>
          TacticGradeCards.fromJson(e)).toList() as M;
    }
    if (<TacticsDefineEntity>[] is M) {
      return data.map<TacticsDefineEntity>((Map<String, dynamic> e) =>
          TacticsDefineEntity.fromJson(e)).toList() as M;
    }
    if (<TeamInfoEntity>[] is M) {
      return data.map<TeamInfoEntity>((Map<String, dynamic> e) =>
          TeamInfoEntity.fromJson(e)).toList() as M;
    }
    if (<TeamInfoTeamPreference>[] is M) {
      return data.map<TeamInfoTeamPreference>((Map<String, dynamic> e) =>
          TeamInfoTeamPreference.fromJson(e)).toList() as M;
    }
    if (<TeamPlayerInfoEntity>[] is M) {
      return data.map<TeamPlayerInfoEntity>((Map<String, dynamic> e) =>
          TeamPlayerInfoEntity.fromJson(e)).toList() as M;
    }
    if (<TeamPlayerInfoPotential>[] is M) {
      return data.map<TeamPlayerInfoPotential>((Map<String, dynamic> e) =>
          TeamPlayerInfoPotential.fromJson(e)).toList() as M;
    }
    if (<TeamPlayerListEntity>[] is M) {
      return data.map<TeamPlayerListEntity>((Map<String, dynamic> e) =>
          TeamPlayerListEntity.fromJson(e)).toList() as M;
    }
    if (<TeamRankEntity>[] is M) {
      return data.map<TeamRankEntity>((Map<String, dynamic> e) =>
          TeamRankEntity.fromJson(e)).toList() as M;
    }
    if (<TeamRuleConfigEntity>[] is M) {
      return data.map<TeamRuleConfigEntity>((Map<String, dynamic> e) =>
          TeamRuleConfigEntity.fromJson(e)).toList() as M;
    }
    if (<TeamSimpleEntity>[] is M) {
      return data.map<TeamSimpleEntity>((Map<String, dynamic> e) =>
          TeamSimpleEntity.fromJson(e)).toList() as M;
    }
    if (<TradeInfoEntity>[] is M) {
      return data.map<TradeInfoEntity>((Map<String, dynamic> e) =>
          TradeInfoEntity.fromJson(e)).toList() as M;
    }
    if (<TradeInfoTotalSalary>[] is M) {
      return data.map<TradeInfoTotalSalary>((Map<String, dynamic> e) =>
          TradeInfoTotalSalary.fromJson(e)).toList() as M;
    }
    if (<TradeInfoTradePlayers>[] is M) {
      return data.map<TradeInfoTradePlayers>((Map<String, dynamic> e) =>
          TradeInfoTradePlayers.fromJson(e)).toList() as M;
    }
    if (<TradeInfoTradePlayersTrend>[] is M) {
      return data.map<TradeInfoTradePlayersTrend>((Map<String, dynamic> e) =>
          TradeInfoTradePlayersTrend.fromJson(e)).toList() as M;
    }
    if (<TrainDefineEntity>[] is M) {
      return data.map<TrainDefineEntity>((Map<String, dynamic> e) =>
          TrainDefineEntity.fromJson(e)).toList() as M;
    }
    if (<TrainTaskEntity>[] is M) {
      return data.map<TrainTaskEntity>((Map<String, dynamic> e) =>
          TrainTaskEntity.fromJson(e)).toList() as M;
    }
    if (<TrainingInfoEntity>[] is M) {
      return data.map<TrainingInfoEntity>((Map<String, dynamic> e) =>
          TrainingInfoEntity.fromJson(e)).toList() as M;
    }
    if (<TrainingInfoAward>[] is M) {
      return data.map<TrainingInfoAward>((Map<String, dynamic> e) =>
          TrainingInfoAward.fromJson(e)).toList() as M;
    }
    if (<TrainingInfoProp>[] is M) {
      return data.map<TrainingInfoProp>((Map<String, dynamic> e) =>
          TrainingInfoProp.fromJson(e)).toList() as M;
    }
    if (<TrainingInfoTraining>[] is M) {
      return data.map<TrainingInfoTraining>((Map<String, dynamic> e) =>
          TrainingInfoTraining.fromJson(e)).toList() as M;
    }
    if (<TrainingInfoBuff>[] is M) {
      return data.map<TrainingInfoBuff>((Map<String, dynamic> e) =>
          TrainingInfoBuff.fromJson(e)).toList() as M;
    }
    if (<TrainingTaskEntity>[] is M) {
      return data.map<TrainingTaskEntity>((Map<String, dynamic> e) =>
          TrainingTaskEntity.fromJson(e)).toList() as M;
    }
    if (<UpStartTeamPlayerResponseEntity>[] is M) {
      return data.map<UpStartTeamPlayerResponseEntity>((
          Map<String, dynamic> e) =>
          UpStartTeamPlayerResponseEntity.fromJson(e)).toList() as M;
    }
    if (<UpStartTeamPlayerResponseDataBefore>[] is M) {
      return data.map<UpStartTeamPlayerResponseDataBefore>((
          Map<String, dynamic> e) =>
          UpStartTeamPlayerResponseDataBefore.fromJson(e)).toList() as M;
    }
    if (<UpStartTeamPlayerResponseDataBeforePotential>[] is M) {
      return data.map<UpStartTeamPlayerResponseDataBeforePotential>((
          Map<String, dynamic> e) =>
          UpStartTeamPlayerResponseDataBeforePotential.fromJson(e))
          .toList() as M;
    }
    if (<UpStartTeamPlayerResponseDataBeforeUpStarBase>[] is M) {
      return data.map<UpStartTeamPlayerResponseDataBeforeUpStarBase>((
          Map<String, dynamic> e) =>
          UpStartTeamPlayerResponseDataBeforeUpStarBase.fromJson(e))
          .toList() as M;
    }
    if (<UpStartTeamPlayerResponseDataAfter>[] is M) {
      return data.map<UpStartTeamPlayerResponseDataAfter>((
          Map<String, dynamic> e) =>
          UpStartTeamPlayerResponseDataAfter.fromJson(e)).toList() as M;
    }
    if (<UpStartTeamPlayerResponseDataAfterPotential>[] is M) {
      return data.map<UpStartTeamPlayerResponseDataAfterPotential>((
          Map<String, dynamic> e) =>
          UpStartTeamPlayerResponseDataAfterPotential.fromJson(e))
          .toList() as M;
    }
    if (<UpStartTeamPlayerResponseDataAfterUpStarBase>[] is M) {
      return data.map<UpStartTeamPlayerResponseDataAfterUpStarBase>((
          Map<String, dynamic> e) =>
          UpStartTeamPlayerResponseDataAfterUpStarBase.fromJson(e))
          .toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AllTeamPlayersByUpStarEntity).toString(): AllTeamPlayersByUpStarEntity
        .fromJson,
    (AllTeamPlayersByUpStarPotential)
        .toString(): AllTeamPlayersByUpStarPotential.fromJson,
    (AllTeamPlayersByUpStarUpStarBase)
        .toString(): AllTeamPlayersByUpStarUpStarBase.fromJson,
    (ApiErrorCodeEntity).toString(): ApiErrorCodeEntity.fromJson,
    (BattleEntity).toString(): BattleEntity.fromJson,
    (BattleNew).toString(): BattleNew.fromJson,
    (TeamBuffer).toString(): TeamBuffer.fromJson,
    (TeamPlayerList).toString(): TeamPlayerList.fromJson,
    (Potential).toString(): Potential.fromJson,
    (UpStarBase).toString(): UpStarBase.fromJson,
    (BattleTeam).toString(): BattleTeam.fromJson,
    (Preference).toString(): Preference.fromJson,
    (AbilityValue).toString(): AbilityValue.fromJson,
    (BattleGameData).toString(): BattleGameData.fromJson,
    (ScoreBoardDetails).toString(): ScoreBoardDetails.fromJson,
    (ScoreBoard).toString(): ScoreBoard.fromJson,
    (GameSchedule).toString(): GameSchedule.fromJson,
    (TestDataMap).toString(): TestDataMap.fromJson,
    (CardPackInfoEntity).toString(): CardPackInfoEntity.fromJson,
    (CardPackInfoCard).toString(): CardPackInfoCard.fromJson,
    (PropDefineEntity).toString(): PropDefineEntity.fromJson,
    (GameSchedulesInfo).toString(): GameSchedulesInfo.fromJson,
    (GradeInStarDefineEntity).toString(): GradeInStarDefineEntity.fromJson,
    (GuessData).toString(): GuessData.fromJson,
    (Awards).toString(): Awards.fromJson,
    (GuessGameInfoEntity).toString(): GuessGameInfoEntity.fromJson,
    (GuessGameInfoV2Entity).toString(): GuessGameInfoV2Entity.fromJson,
    (GuessInfosEntity).toString(): GuessInfosEntity.fromJson,
    (GuessInfosL5Avg).toString(): GuessInfosL5Avg.fromJson,
    (GuessInfosGuessData).toString(): GuessInfosGuessData.fromJson,
    (GuessInfosGuessReferenceValue).toString(): GuessInfosGuessReferenceValue
        .fromJson,
    (GuessPlayerParamEntity).toString(): GuessPlayerParamEntity.fromJson,
    (GuessGameParamEntity).toString(): GuessGameParamEntity.fromJson,
    (GuessReferenceValue).toString(): GuessReferenceValue.fromJson,
    (GuessTopReviewsEntity).toString(): GuessTopReviewsEntity.fromJson,
    (MyTeamEntity).toString(): MyTeamEntity.fromJson,
    (NabPlayerSeasonGameRankEntity).toString(): NabPlayerSeasonGameRankEntity
        .fromJson,
    (NbaGameDetailEntity).toString(): NbaGameDetailEntity.fromJson,
    (NbaGameDetailScoreBoardDetails).toString(): NbaGameDetailScoreBoardDetails
        .fromJson,
    (NbaGameDetailGameData).toString(): NbaGameDetailGameData.fromJson,
    (NbaGameDetailGameDataTeamScore).toString(): NbaGameDetailGameDataTeamScore
        .fromJson,
    (NbaGameDetailGameDataPlayerScores)
        .toString(): NbaGameDetailGameDataPlayerScores.fromJson,
    (NbaPlayerBaseInfoEntity).toString(): NbaPlayerBaseInfoEntity.fromJson,
    (NbaPlayerBaseInfoPlayerDataAvg).toString(): NbaPlayerBaseInfoPlayerDataAvg
        .fromJson,
    (NbaPlayerBaseInfoGuessInfos).toString(): NbaPlayerBaseInfoGuessInfos
        .fromJson,
    (NbaPlayerBaseInfoGuessInfosAstCommunityPick)
        .toString(): NbaPlayerBaseInfoGuessInfosAstCommunityPick.fromJson,
    (NbaPlayerBaseInfoGuessInfosAstPicks)
        .toString(): NbaPlayerBaseInfoGuessInfosAstPicks.fromJson,
    (NbaPlayerBaseInfoGuessInfosAstPicksGuessReferenceValue)
        .toString(): NbaPlayerBaseInfoGuessInfosAstPicksGuessReferenceValue
        .fromJson,
    (NbaPlayerBaseInfoGuessInfosAstTwoTeamGames)
        .toString(): NbaPlayerBaseInfoGuessInfosAstTwoTeamGames.fromJson,
    (NbaPlayerBaseInfoGuessInfosReb).toString(): NbaPlayerBaseInfoGuessInfosReb
        .fromJson,
    (NbaPlayerBaseInfoGuessInfosRebCommunityPick)
        .toString(): NbaPlayerBaseInfoGuessInfosRebCommunityPick.fromJson,
    (NbaPlayerBaseInfoGuessInfosRebPicks)
        .toString(): NbaPlayerBaseInfoGuessInfosRebPicks.fromJson,
    (NbaPlayerBaseInfoGuessInfosRebPicksGuessReferenceValue)
        .toString(): NbaPlayerBaseInfoGuessInfosRebPicksGuessReferenceValue
        .fromJson,
    (NbaPlayerBaseInfoGuessInfosRebTwoTeamGames)
        .toString(): NbaPlayerBaseInfoGuessInfosRebTwoTeamGames.fromJson,
    (NbaPlayerBaseInfoGuessInfosProperty)
        .toString(): NbaPlayerBaseInfoGuessInfosProperty.fromJson,
    (NbaPlayerBaseInfoGuessInfosPtsCommunityPick)
        .toString(): NbaPlayerBaseInfoGuessInfosPtsCommunityPick.fromJson,
    (NbaPlayerBaseInfoGuessInfosPtsPicks)
        .toString(): NbaPlayerBaseInfoGuessInfosPtsPicks.fromJson,
    (NbaPlayerBaseInfoGuessInfosPtsPicksGuessReferenceValue)
        .toString(): NbaPlayerBaseInfoGuessInfosPtsPicksGuessReferenceValue
        .fromJson,
    (NbaPlayerBaseInfoGuessInfosPtsTwoTeamGames)
        .toString(): NbaPlayerBaseInfoGuessInfosPtsTwoTeamGames.fromJson,
    (NbaPlayerBaseInfoPlayerBaseInfo)
        .toString(): NbaPlayerBaseInfoPlayerBaseInfo.fromJson,
    (NbaPlayerBaseInfoL5GameData).toString(): NbaPlayerBaseInfoL5GameData
        .fromJson,
    (NbaPlayerBaseInfoL5DataAvg).toString(): NbaPlayerBaseInfoL5DataAvg
        .fromJson,
    (NbaPlayerBaseInfoPlayerRegularMap)
        .toString(): NbaPlayerBaseInfoPlayerRegularMap.fromJson,
    (NbaPlayerBaseInfoPlayerPlayoffsMap)
        .toString(): NbaPlayerBaseInfoPlayerPlayoffsMap.fromJson,
    (NbaPlayerBaseInfoPlayerTrends).toString(): NbaPlayerBaseInfoPlayerTrends
        .fromJson,
    (NbaPlayerBaseInfoPlayerNews).toString(): NbaPlayerBaseInfoPlayerNews
        .fromJson,
    (NbaPlayerInfosEntity).toString(): NbaPlayerInfosEntity.fromJson,
    (NbaPlayerInfosPlayerDataAvgList)
        .toString(): NbaPlayerInfosPlayerDataAvgList.fromJson,
    (NbaPlayerInfosPlayerDataCapList)
        .toString(): NbaPlayerInfosPlayerDataCapList.fromJson,
    (NbaPlayerInfosPlayerBaseInfoList)
        .toString(): NbaPlayerInfosPlayerBaseInfoList.fromJson,
    (NbaPlayerSeasonEntity).toString(): NbaPlayerSeasonEntity.fromJson,
    (NbaPlayerSeasonGameEntity).toString(): NbaPlayerSeasonGameEntity.fromJson,
    (NbaPlayerStatEntity).toString(): NbaPlayerStatEntity.fromJson,
    (NbaTeamEntity).toString(): NbaTeamEntity.fromJson,
    (NewTestEntity).toString(): NewTestEntity.fromJson,
    (NewTestAst).toString(): NewTestAst.fromJson,
    (NewTestAstGuessReferenceValue).toString(): NewTestAstGuessReferenceValue
        .fromJson,
    (NewTest3pt).toString(): NewTest3pt.fromJson,
    (NewTest3ptGuessReferenceValue).toString(): NewTest3ptGuessReferenceValue
        .fromJson,
    (NewTestPts).toString(): NewTestPts.fromJson,
    (NewTestPtsGuessReferenceValue).toString(): NewTestPtsGuessReferenceValue
        .fromJson,
    (PicksDefineEntity).toString(): PicksDefineEntity.fromJson,
    (NewsEntity).toString(): NewsEntity.fromJson,
    (NewsListEntity).toString(): NewsListEntity.fromJson,
    (NewsListDetail).toString(): NewsListDetail.fromJson,
    (PickTypeEntity).toString(): PickTypeEntity.fromJson,
    (PlayerDayDataEntity).toString(): PlayerDayDataEntity.fromJson,
    (PlayerStatusEntity).toString(): PlayerStatusEntity.fromJson,
    (RankAwardEntity).toString(): RankAwardEntity.fromJson,
    (RankInfoEntity).toString(): RankInfoEntity.fromJson,
    (RankListEntity).toString(): RankListEntity.fromJson,
    (RankListMyRank).toString(): RankListMyRank.fromJson,
    (ReceivePropEntity).toString(): ReceivePropEntity.fromJson,
    (ReciveAwardEntity).toString(): ReciveAwardEntity.fromJson,
    (ReciveAwardL5Avg).toString(): ReciveAwardL5Avg.fromJson,
    (ReciveAwardV2Entity).toString(): ReciveAwardV2Entity.fromJson,
    (ReciveAwardV2GuessInfo).toString(): ReciveAwardV2GuessInfo.fromJson,
    (ReciveAwardV2GuessInfoGuessData)
        .toString(): ReciveAwardV2GuessInfoGuessData.fromJson,
    (ReviewEntity).toString(): ReviewEntity.fromJson,
    (RewardGroupEntity).toString(): RewardGroupEntity.fromJson,
    (ScoresEntity).toString(): ScoresEntity.fromJson,
    (ScoresNotStartGameEntity).toString(): ScoresNotStartGameEntity.fromJson,
    (TeamPlayer).toString(): TeamPlayer.fromJson,
    (TeamHistory).toString(): TeamHistory.fromJson,
    (StarUpDefineEntity).toString(): StarUpDefineEntity.fromJson,
    (TacticGradeEntity).toString(): TacticGradeEntity.fromJson,
    (TacticGradeCards).toString(): TacticGradeCards.fromJson,
    (TacticsDefineEntity).toString(): TacticsDefineEntity.fromJson,
    (TeamInfoEntity).toString(): TeamInfoEntity.fromJson,
    (TeamInfoTeamPreference).toString(): TeamInfoTeamPreference.fromJson,
    (TeamPlayerInfoEntity).toString(): TeamPlayerInfoEntity.fromJson,
    (TeamPlayerInfoPotential).toString(): TeamPlayerInfoPotential.fromJson,
    (TeamPlayerListEntity).toString(): TeamPlayerListEntity.fromJson,
    (TeamRankEntity).toString(): TeamRankEntity.fromJson,
    (TeamRuleConfigEntity).toString(): TeamRuleConfigEntity.fromJson,
    (TeamSimpleEntity).toString(): TeamSimpleEntity.fromJson,
    (TradeInfoEntity).toString(): TradeInfoEntity.fromJson,
    (TradeInfoTotalSalary).toString(): TradeInfoTotalSalary.fromJson,
    (TradeInfoTradePlayers).toString(): TradeInfoTradePlayers.fromJson,
    (TradeInfoTradePlayersTrend).toString(): TradeInfoTradePlayersTrend
        .fromJson,
    (TrainDefineEntity).toString(): TrainDefineEntity.fromJson,
    (TrainTaskEntity).toString(): TrainTaskEntity.fromJson,
    (TrainingInfoEntity).toString(): TrainingInfoEntity.fromJson,
    (TrainingInfoAward).toString(): TrainingInfoAward.fromJson,
    (TrainingInfoProp).toString(): TrainingInfoProp.fromJson,
    (TrainingInfoTraining).toString(): TrainingInfoTraining.fromJson,
    (TrainingInfoBuff).toString(): TrainingInfoBuff.fromJson,
    (TrainingTaskEntity).toString(): TrainingTaskEntity.fromJson,
    (UpStartTeamPlayerResponseEntity)
        .toString(): UpStartTeamPlayerResponseEntity.fromJson,
    (UpStartTeamPlayerResponseDataBefore)
        .toString(): UpStartTeamPlayerResponseDataBefore.fromJson,
    (UpStartTeamPlayerResponseDataBeforePotential)
        .toString(): UpStartTeamPlayerResponseDataBeforePotential.fromJson,
    (UpStartTeamPlayerResponseDataBeforeUpStarBase)
        .toString(): UpStartTeamPlayerResponseDataBeforeUpStarBase.fromJson,
    (UpStartTeamPlayerResponseDataAfter)
        .toString(): UpStartTeamPlayerResponseDataAfter.fromJson,
    (UpStartTeamPlayerResponseDataAfterPotential)
        .toString(): UpStartTeamPlayerResponseDataAfterPotential.fromJson,
    (UpStartTeamPlayerResponseDataAfterUpStarBase)
        .toString(): UpStartTeamPlayerResponseDataAfterUpStarBase.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}